version
?ls
x <- 1:10
x
y <- x * 2
y
plot(x,y)
q()
?ls
?mean
help.search('weight')
install.packages('dplyr')
dir()
data("iris")
lear
setwd("~/Desktop/BMI_code")
setwd("~/Desktop/BMI_code")
getwd()
c(2,4,6)
2:6
x<-1:10
x
x^2
plot(x,x^2)
dir()
print(j)
#usage of for loop
for(i in 1:5){
j <- i + 10
print(j)
}
#usage of for loop
for(i in 1:5){
j <- i + 10
print(j)
}
#usage of for loop
for(i in 1:5){
j <- i + 10
print(j)
}
#usage of while loop
while(i < 5){
print(i)
i <- i + 1
}
#usage of while loop
while(i < 5){
print(i)
i <- i + 1
}
rm(i)
rm(j)
#usage of for loop
for(i in 1:5){
j <- i + 10
print(j)
}
#usage of while loop
while(i < 5){
print(i)
i <- i + 1
}
i
#if statement
if(i>3)
{
print("yes")
}else
{
print("no")
}
#usage of while loop
while(i < 5){
print(i)
i <- i + 1
}
#if statement
if(i>3)
{
print("yes")
}else
{
print("no")
}
#usage of functions
square <- function(x)
{
squared <- x*x
return squared
}
#usage of functions
square <- function(x){
squared <- x*x
return(squared)
}
square(2)
square(3)
?paste
## variable assignment
a <- 'apple'
a
b <- 'banana'
b
c <- paste(b,a)
c
## matrix
x <- seq(1, 9)
m <- matrix(x, nrow = 3, ncol = 3)
dim(m)
class(m)
m[2, ] # select a row
m[, 1] # select a column
m[2, 3] # select an element
summary(m) # generate summaries of the matrix
x
m
## list
l <- list(x = 1:5, y = c('A', 'B'))
l
class(l)
l$x
l$y
## data frame
df <- data.frame(x = 1:3, y = c('A', 'B', 'C'))
df
class(df)
dim(df)
nrow(df)
ncol(df)
df[2, ] # select a row
df[, 2] # select a column
write.csv(df, 'file.csv')
df1 <- read.csv('file.csv')
df2 <- read.csv('file.csv', header = TRUE)
df3 <- read.csv('file.csv')[, -1]
df4 <- read.csv('file.csv')[-1, ]
df
df1
df2
df3
df4
data <- read.csv("cardio_labs.csv", header = TRUE)
## Read in the data using the 'read.csv' function.  You can call it
##  something simple like 'data' or 'cardio.data'
data <- read.csv("cardio_labs.csv", header = TRUE)
data
data <- read.csv("cardio_labs.csv", header = FALSE)
data
View(data)
View(data)
View(data)
rem(data)
rm(data)
data <- read.csv("cardio_labs.csv", header = FALSE)
data
rm(data)
## Read in the data using the 'read.csv' function.  You can call it
##  something simple like 'data' or 'cardio.data'
data <- read.csv("cardio_labs.csv", header = TRUE)
data
## Use 'head' to look at the first few observations of the data
head(data)
## Use 'names' to see just the variable (column) names
names(data)
## Use 'dim' to see the dimension (number of columns (variables) and rows (subjects))
##  of the data
dim(data)
## I don't like dealing with CAPS or '_' in variable names, so use the following to change
##  the variable names to lowercase and replace the '_' with a '.' (where 'data' is the name for
##  whatever you called the data set in R)
names(data) <- tolower(names(data))
names(data) <- gsub("_", ".", names(data))
names(data)
## Use 'str' to look at the structure of the data.  What class (numeric, character, factor)
##  was used for the cholesterol and BMI variables?  Is that surprising to you?
str(data)
## We don't want to have a non-numeric class for cholesterol data, so try forcing the 'cholesterol'
##  variable to be numeric using 'as.numeric'.  Call this something different like 'data$cholesterol2'
##  to avoid overwriting the original 'cholesterol' value (we'll use both in the exercise). Use 'str'
##  and 'head' to check your result
data$cholesterol2 <- as.numeric(data$cholesterol)
str(data)
head(data)
## If you just used 'as.numeric(data$cholesterol)' you get a strange result that doesn't match the
## original cholesterol values.  This is because 'cholesterol' was stored as a factor, and what
## you are converting to numeric are the integer levels used to represent the factor levels.
## Instead, try using 'as.numeric(as.character(data$cholesterol))' to see if that works
data$cholesterol2 <- as.numeric(as.character(data$cholesterol))
str(data)
head(data)
## Use 'sum' and 'is.na' together to check how many missing values there are in 'cholesterol2'
sum(is.na(data$cholesterol2))
## There are quite a few missing values now in cholesterol.  Let's see what values these correspond
##  to in the original 'cholesterol' variable.  First, use 'is.na' and 'which' (which is optional) to
##  create an index of which subjects have missing cholesterol values
idx <- which(is.na(data$cholesterol2))
idx
## There are quite a few missing values now in cholesterol.  Let's see what values these correspond
##  to in the original 'cholesterol' variable.  First, use 'is.na' and 'which' (which is optional) to
##  create an index of which subjects have missing cholesterol values
idx <- which(is.na(data$cholesterol2))
## Then, use 'unique' to look at the unique values of the original 'cholesterol' variable corresponding
##  to this index. What are these values?  Does it seem reasonable to set these to missing?
unique(data$cholesterol[idx])
## Now, let's repeat this exercise with the 'bmi' variable
data$bmi2 <- as.numeric(as.character(data$bmi))
str(data)
head(data)
sum(is.na(data$bmi2))
idx <- which(is.na(data$bmi2))
unique(data$bmi[idx])
## hmm, also not bad ..
na.strings <- c("--", "Sent to main lab")
data <- read.csv("cardio_labs.csv", header = TRUE, na.strings = na.strings)
names(data) <- tolower(names(data))
names(data) <- gsub("_", ".", names(data))
names(data)
str(data)
class(data$bmi)
## The 'ldl.chol.calc' variable is still being read in as a factor.  Let's repeat the
##  steps we used for 'bmi' and 'cholesterol' previously to convert this to a numeric
##  variable and see what values are converted to missing
data$ldl.chol.calc2 <- as.numeric(as.character(data$ldl.chol.calc))
sum(is.na(data$ldl.chol.calc2))
idx <- which(is.na(data$ldl.chol.calc2))
unique(data$ldl.chol.calc[idx])
## The 'ldl.chol.calc' variable is still being read in as a factor.  Let's repeat the
##  steps we used for 'bmi' and 'cholesterol' previously to convert this to a numeric
##  variable and see what values are converted to missing
data$ldl.chol.calc2 <- as.numeric(as.character(data$ldl.chol.calc))
sum(is.na(data$ldl.chol.calc2))
idx <- which(is.na(data$ldl.chol.calc2))
unique(data$ldl.chol.calc[idx])
data$ldl.chol.calc2))
> unique(data$ldl.chol.calc[idx]
## Use the 'summary' command on the numeric 'ldl.chol.calc2' variable you just created to see
##  summary characteristics of its distribution in this sample
summary(data$ldl.chol.calc2)  ## some seem a little suspicious
## Be sure to put '0' as the intial value for the cutpoint and a value above 406 (the max value in
##  the data set) as the last (highest) value.  Check to make sure you have the same number of NAs
##  as in the numeric version using the 'sum' and 'is.na' command (you can also just use 'summary'
##  instead)
data$ldl.chol.calc.fac <- cut(data$ldl.chol.calc2, breaks = c(0, 100, 130, 160, 190, 410),
right = FALSE)
sum(is.na(data$ldl.chol.calc.fac))
summary(data$ldl.chol.calc.fac)
## Check your result using the 'table' command and also the 'prop.table' command.  What
##  proportion of subjects are in each of the categories defined by the NHLBI?
(tab <- table(data$ldl.chol.calc.fac))
round(prop.table(tab), 2)
data <- read.csv("cardio_labs.csv", header = TRUE)
data <- read.csv("cardio_labs.csv", header = TRUE)
data
## Use 'head' to look at the first few observations of the data
head(data)
## Read in the data using the 'read.csv' function.  You can call it
##  something simple like 'data' or 'cardio.data'
data <- read.csv("cardio_labs.csv", header = FALSE)
## Use 'head' to look at the first few observations of the data
head(data)
## Read in the data using the 'read.csv' function.  You can call it
##  something simple like 'data' or 'cardio.data'
data <- read.csv("cardio_labs.csv", header = TRUE)
## Use 'head' to look at the first few observations of the data
head(data)
## Use 'names' to see just the variable (column) names
names(data)
## Use 'dim' to see the dimension (number of columns (variables) and rows (subjects))
##  of the data
dim(data)
names(data) <- tolower(names(data))
names(data) <- gsub("_", ".", names(data))
names(data)
## Use 'str' to look at the structure of the data.  What class (numeric, character, factor)
##  was used for the cholesterol and BMI variables?  Is that surprising to you?
str(data)
data$cholesterol2 <- as.numeric(data$cholesterol)
str(data)
data$cholesterol2 <- as.numeric(data$cholesterol)
str(data)
head(data)
data$cholesterol2 <- as.numeric(as.character(data$cholesterol))
str(data)
head(data)
## Use 'sum' and 'is.na' together to check how many missing values there are in 'cholesterol2'
sum(is.na(data$cholesterol2))
idx <- which(is.na(data$cholesterol2))
unique(data$cholesterol[idx])
data$bmi2 <- as.numeric(as.character(data$bmi))
str(data)
head(data)
sum(is.na(data$bmi2))
idx <- which(is.na(data$bmi2))
unique(data$bmi[idx])
na.strings <- c("--", "Sent to main lab")
data <- read.csv("cardio_labs.csv", header = TRUE, na.strings = na.strings)
names(data) <- tolower(names(data))
names(data) <- gsub("_", ".", names(data))
names(data)
str(data)
class(data$bmi)
data$ldl.chol.calc2 <- as.numeric(as.character(data$ldl.chol.calc))
sum(is.na(data$ldl.chol.calc2))
idx <- which(is.na(data$ldl.chol.calc2))
unique(data$ldl.chol.calc[idx])
summary(data$ldl.chol.calc2)
data$ldl.chol.calc.fac <- cut(data$ldl.chol.calc2, breaks = c(0, 100, 130, 160, 190, 410),
right = FALSE)
sum(is.na(data$ldl.chol.calc.fac))
summary(data$ldl.chol.calc.fac)
(tab <- table(data$ldl.chol.calc.fac))
round(prop.table(tab), 2)
